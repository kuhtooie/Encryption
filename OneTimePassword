from hashlib import sha256
from random import randint
import pandas as pd

class MFI:
    
    def __init__(self,data="""S0703E6011HMM53234363879L19M26H38593M6SHH8363LLL2358HLRSRS3VaFundlyo{f[3tTc053SiS][VticeS]]{S18VVoiSBite3}[BeSSeVSSoS{8u]aexu8SS][SC058SSS][exrrStttnSottSteS][ESaeSe][2Vaoxe][eiccLe][028ALA][9tBVr][xixu[S8S[tt8tS][on{sxrr}mmit][8e8a2iSccSSSituP][LuVot2rttSsma][2oeSrcrr]SierraClinic[BrS8]NSAi[S0A][rS2SetS][iSAStc][eSitSe][xxLiS][8toui][8tScr][t2crrS][ttS2eicrtS][H88888888888SSSSS8S3858SSSSSSSS08858888SSS8S]{rebPUaorrdC35r437S87828rS4773778r88Ur8S8Mr7MU8S8996476TB4e374S[J78r39SS148STSSS54S4SSS]tr[SdMSSi4SSSSSSS]}[mapE8TcetSt1ueSS44444S4B4444iB4z4S]=Tattoos5ISe44S4_098TS=[64iSSS4]TBC33TCcr4SttuuSu588300284000rPaU8888SS8S83PTPS8S83BS0444B[[S2[zz]]][[sheurefofC[jfap3f48zut4ha4S4z4t444z4S65futSzu{1Ce;aJ},B[a]VmL5[uz]S]]][Bdiudes838SBie44SSS444S4ii4S4SS][CyLifnot9MBC9BBSBtoMM38SU8SyCMSMB1M38oSSSoS][hpietRuiSz[{RenSS:5oteM,z:[cS8SrS4S4,SrS87BSSr44S4]}<>];entlxeDA[CSSBCB{LtMSBSB},B[JJBB]S]yrolTystCtoleltcSez44S44S44SSSS4[ChSSSVViiSi]{tehctniFm4BBS4S44S4S}]#[MCCeu3SSSiMCCCSC{3]x]tti}]S]FlagstaffMC[Se[88]]H{nctBBCS448FS4}o[[[aa0644][[4]FtCS8C]t8]S4rl][;oS]SBchSSfx]}M}CalxS[CC8a88g]fxfC8SeC{[8ieeCy448CSae8A}C]}]][3oe,AS8TFASl4]}]0SS[o4[3StexoCSAATCAS44T4]63=tB1o4BSSB8CCCC[aB]]aAlS[3AT]eTeAS]}}444l]l}}}4l}}}}l4}]o[oS}==TS4ACoa}AA]A4]C}}l]l]CS[LLe{ASoAl3=S=T}A]}Sl}l]l563fb5{XayonasA18885935FnFFFSFLuSt4u4LOL4uS4u4Lh444S48ViHSHHHHH}[eFrcoiBtS0Se0BSB4880f8444S43e44S4ScramblesR88S883LH8R8S8HR44SL444h44]<aEhS0S3333034HRSSTTSSS24S44S4HR44SL444h44ReginaSpektor8S88UMUSSS88S86eUSSSSS62SinSSS>#nSpitcriemrAs8920063076909058586437031010F851EA98DEEA213119834175011643S014S1466343#(VcenaRiiSSS4S443LL8SSSSSSS4SiL4HSTHHBSS4S04eSS4444S4S66SmsL)C{enA#LhsTsL}T{#}[k;L5SS28L8HSi4ShS66SLLLLSLshmmmSL){rS}ssmsLLmLLSmmLsLLsSsssmsu3CS3]eS04S(Vin4SeSSmhhSsSLpp4e444eLs4S4on6666666sL6msSmm6ss6)"""):
        self.XLMIMF=data
        self.M=""
        self.nonce=[]
    
    def xlm(self):

        while len(self.XLMIMF)>0:
            sage=randint(0,randint(0,len(self.XLMIMF)-1))
            self.M+=self.XLMIMF[sage]
            if sage==0:
                self.XLMIMF=self.XLMIMF[1::]
            else:
                self.XLMIMF=self.XLMIMF[::sage]+self.XLMIMF[sage+1::]
        print(self.M)

    
    def xlm_hash(self):
        a = Hash_codes()
        a.hash()
        self.XLMIMF+=a.code
        self.xlm()

    
    def nonce(self):
        self.get_nonce()
        n = self.nonce[1].keys()
        n= n[len(n)-1]
        x=1

        while x == 1:
            n+=1
            xlmimf=self.XLMIMF+str(n)       
            xlmimf  = sha256(xlmimf.encode("ascii"))
            
            if xlmimf[::4] == "0000" and sha256(self.XLMIMF.encode("ascii")) == self.nonce[0]:
                self.nonce[1][n] = n
                x=0
                self.save_nonce()
                                  
                                  
    def get_nonce(self):
        #self.nonce = pd.read_csv("nonce_location")
        n={}
        for i in self.nonce[1].keys:
            n[i]=i
        self.nonce[1] = n

        
    def save_nonce(self):
        self.nonce = pd.Dataframe(self.nonce)
        #self.nonce.to_csv("nonce_location)

class Hash_codes:

    def __init__(self):
        self.code = ''
        self.list = []


    def scramble_list(self, list):
        b = len(list) - 1
        self.list = []
        while b >= 0:
            c = randint(0, randint(0, b))
            self.list.append(list[c])
            list.pop(c)
            b -= 1


    def scramble(self, phrase):
        phrase = phrase.split(" ")
        b = len(phrase) - 1
        d = []
        while b >= 0:
            c = randint(0, randint(0, b))
            d.append(phrase[c])
            phrase.pop(c)
            b -= 1
            self.code = ''
            for i in range(len(d)):
                if i == len(d) - 1:
                    self.code += d[i]
                else:
                    self.code += d[i] + " "
        
        
    def make_sha(self):

        l1 = ['a', 'b', 'c', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
              't', 'u', 'v', 'w', 'x', 'y', 'z']
        l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        l3 = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '+', '=']
        b = len(l1) - 1
        d = []
        for i in range(3):

            if i < 1:
                a = l1
            elif i < 2:
                a = l2
                b = len(l2) - 1
            else:
                a = l3
                b = len(l3) - 1

            while b >= 0:
                c = randint(0, randint(0, b))
                d.append(str(a[c]))
                a.pop(c)
                b -= 1
            if i == 2:
                b = len(l2) - 1
            else:
                b = len(l3) - 1

        self.scramble_list(d)
        self.code = ''
        for i in self.list:
            self.code += i

        self.scramble(self.code)

    def hash(self):
        self.make_sha()
        code = self.code[round((len(self.code)-1)/2)::] + self.code
        self.make_sha()
        self.code = self.code + code


    def scramble_chain(self, l=''):

        if len(l):
            self.list = []
            lis = self.list
        else:
            self.list1 = []
            lis = self.list1

        self.code = self.code.split(" ")
        for i in self.code:
            b = len(self.code) - 1
            d = []
            while b >= 0:
                c = randint(0, randint(0, b))
                d.append(self.code[c])
                self.code.pop(c)
                b -= 1
                c = ''
                for i in range(len(d)):
                    if i == len(d) - 1:
                        c += d[i]
                    else:
                        c += d[i] + " "
                lis.append(c)

        if len(l):
            self.list = lis
        else:
            self.list1 = lis

    def brute_scramble(self, s=''):
        l1 = ['a', 'b', 'c', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
              't', 'u', 'v', 'w', 'x', 'y', 'z']
        l2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        b = len(l1) - 1
        d = []
        for i in range(2):
            if i < 1:
                self.list = l1
            else:
                self.list = l2

            while b >= 0:
                c = randint(0, randint(0, b))
                d.append(str(self.list[c]))
                self.list.pop(c)
                b -= 1
            b = len(l2) - 1

        self.code = ""
        for i in range(len(d)):

            if len(s):
                if i == len(d) - 1:
                    self.code += d[i]
                else:
                    self.code += d[i] + " "
            else:
                self.code += d[i]


    def tree(self):
        c = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
        self.cluster = {}
        a = ['h', 'c', 's', 'd']

        for i in a:
            self.cluster[i] = {}
            for dork in c:
                self.brute_scramble(' ')
                self.scramble_chain()
                self.stumble()
                self.scramble_chain(' ')
                self.cluster[i][dork] = {'1': self.list[0], '2': self.list1}
        self.brute_scramble(' ')
        self.scramble_chain()
        self.make_sha()
        self.scramble_chain(' ')


    def shuffle_tree(self):
        pass

        
    def get_sha(self):
        self.hash()
        self.code = sha256(self.code.encode("ascii"))
